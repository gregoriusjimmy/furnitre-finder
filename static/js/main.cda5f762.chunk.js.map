{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-field/search-field.component.js","components/checkbox-input/checkbox-input.component.js","components/checkbox-styles/checkbox-styles.component.js","components/checkbox-delivery-time/checkbox-delivery-time.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","product","name","price","description","delivery_time","furniture_style","className","map","style","key","Math","random","CardList","products","SearchField","placeholder","handleChange","type","onChange","CheckboxInput","value","onClick","htmlFor","CheckboxStyles","CheckboxDeliveryTime","App","handleChangeName","e","setState","searchByName","target","filterProducts","state","searchByFurnitureStyles","searchByTimeDelivery","styles","convertedTimeDelivery","length","forEach","deliveryTime","filter","toLowerCase","includes","every","handleChangeCheckboxStyle","currentStyles","checked","push","handleChangeCheckboxDeliveryTime","currentDeliveryTime","furnitureStyles","displayedProduct","fetch","then","response","json","data","furniture_styles","this","filteredProducts","palceholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cda5f762.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.scss';\r\n\r\nexport const Card = ({ product }) => {\r\n  const { name, price, description, delivery_time, furniture_style } = product;\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='header'>\r\n        <h3 className='name'>{name}</h3>\r\n        <p className='price'>{price}</p>\r\n      </div>\r\n      <p className='description'>{description}</p>\r\n      <ul className='furniture-style'>\r\n        {furniture_style.map((style) => {\r\n          return <li key={Math.random()}>{style}</li>;\r\n        })}\r\n      </ul>\r\n      <p className='delivery-time'>{delivery_time}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './card-list.styles.scss';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = ({ products }) => {\r\n  return (\r\n    <div className='card-list'>\r\n      {products.map((product) => (\r\n        <Card key={Math.random()} product={product} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n// import './search-box.styles.css';\r\n\r\nexport const SearchField = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input type='search' placeholder={placeholder} onChange={handleChange} />\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const CheckboxInput = ({ value, handleChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        type='checkbox'\r\n        name={value}\r\n        value={value}\r\n        onClick={handleChange}\r\n      />\r\n      <label htmlFor={value}>{value}</label>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { CheckboxInput } from '../checkbox-input/checkbox-input.component';\r\nexport const CheckboxStyles = ({ handleChange }) => {\r\n  return (\r\n    <div>\r\n      <CheckboxInput value='Classic' handleChange={handleChange} />\r\n      <CheckboxInput value='Midcentury' handleChange={handleChange} />\r\n      <CheckboxInput value='Scandinavian' handleChange={handleChange} />\r\n      <CheckboxInput value='Modern' handleChange={handleChange} />\r\n      <CheckboxInput value='Contemporary' handleChange={handleChange} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { CheckboxInput } from '../checkbox-input/checkbox-input.component';\r\nexport const CheckboxDeliveryTime = ({ handleChange }) => {\r\n  return (\r\n    <div>\r\n      <CheckboxInput value='1 week' handleChange={handleChange} />\r\n      <CheckboxInput value='2 weeks' handleChange={handleChange} />\r\n      <CheckboxInput value='1 month' handleChange={handleChange} />\r\n      <CheckboxInput value='2 months' handleChange={handleChange} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchField } from './components/search-field/search-field.component';\nimport { CheckboxStyles } from './components/checkbox-styles/checkbox-styles.component';\nimport { CheckboxDeliveryTime } from './components/checkbox-delivery-time/checkbox-delivery-time.component';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      products: [],\n      furnitureStyles: [],\n      searchByName: '',\n      searchByFurnitureStyles: [],\n      deliveryTime: ['1 week', '2 weeks', '1 month', '2 months'],\n      searchByTimeDelivery: [],\n      displayedProduct: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://www.mocky.io/v2/5c9105cb330000112b649af8')\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          products: data.products,\n          furnitureStyles: data.furniture_styles,\n        })\n      );\n  }\n\n  handleChangeName = (e) => {\n    this.setState({ searchByName: e.target.value });\n  };\n\n  filterProducts = () => {\n    const {\n      products,\n      searchByName,\n      searchByFurnitureStyles,\n      searchByTimeDelivery,\n    } = this.state;\n    let styles = searchByFurnitureStyles;\n    let convertedTimeDelivery = searchByTimeDelivery.length ? 0 : 111;\n    searchByTimeDelivery.forEach((deliveryTime) => {\n      if (deliveryTime === '1 week') {\n        convertedTimeDelivery += 7;\n      } else if (deliveryTime === '2 weeks') {\n        convertedTimeDelivery += 14;\n      } else if (deliveryTime === '1 month') {\n        convertedTimeDelivery += 30;\n      } else {\n        convertedTimeDelivery += 60;\n      }\n    });\n\n    const displayedProduct = products.filter((product) => {\n      return (\n        product.name.toLowerCase().includes(searchByName.toLowerCase()) &&\n        styles.every((style) => product.furniture_style.includes(style)) &&\n        product.delivery_time <= convertedTimeDelivery\n      );\n    });\n\n    return displayedProduct;\n  };\n  handleChangeCheckboxStyle = (e) => {\n    let currentStyles = this.state.searchByFurnitureStyles;\n    if (e.target.checked) {\n      currentStyles.push(e.target.value);\n    } else {\n      currentStyles = currentStyles.filter((style) => style !== e.target.value);\n    }\n    this.setState({ searchByFurnitureStyles: currentStyles });\n  };\n  handleChangeCheckboxDeliveryTime = (e) => {\n    let currentDeliveryTime = this.state.searchByTimeDelivery;\n    if (e.target.checked) {\n      currentDeliveryTime.push(e.target.value);\n    } else {\n      currentDeliveryTime = currentDeliveryTime.filter(\n        (deliveryTime) => deliveryTime !== e.target.value\n      );\n    }\n    this.setState({ searchByTimeDelivery: currentDeliveryTime });\n  };\n\n  render() {\n    const { searchByName } = this.state;\n    const filteredProducts = this.filterProducts();\n\n    return (\n      <div className='App'>\n        <SearchField\n          palceholder={searchByName}\n          handleChange={this.handleChangeName}\n        />\n        <CheckboxStyles handleChange={this.handleChangeCheckboxStyle} />\n        <CheckboxDeliveryTime\n          handleChange={this.handleChangeCheckboxDeliveryTime}\n        />\n        <CardList products={filteredProducts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}